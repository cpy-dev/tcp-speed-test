#!/usr/bin/python3

import socket as sk
from _thread import start_new_thread
import time
import subprocess

ip = '127.0.0.1'

def _downServer():
    # start client on a new thread, which waits for server to be active
    start_new_thread(_downClient, ()) 

    # create and setup server
    server = sk.socket(sk.AF_INET, sk.SOCK_STREAM)
    server.setsockopt(sk.SOL_SOCKET, sk.SO_REUSEADDR, 1)

    # bind host ip and port to server
    server.bind((ip, 6433))

    # wait for a connection
    server.listen(1)
    client, _ = server.accept()

    # get time before receiving
    before = time.time()

    # receive a kilobyte
    client.recv(1024)

    # get time after receiving
    after = time.time()

    # close connection and server
    client.close()
    server.close()

    # return value in kBps
    return 1 / (after - before)


def _downClient():
    # create and setup client
    client = sk.socket(sk.AF_INET, sk.SOCK_STREAM)

    # wait until server is active and connect
    while True:
        try:
            client.connect((ip, 6433))

        except: pass
        else: break
            
    # send a kilobyte
    client.sendencode())

    # close client
    client.close()


def _upServer():
    # start client on new thread
    start_new_thread(_upClient, ())

    # create and setup server 
    server = sk.socket(sk.AF_INET, sk.SOCK_STREAM)
    server.setsockopt(sk.SOL_SOCKET, sk.SO_REUSEADDR, 1)

    # bind host ip and port to server
    server.bind((ip, 6433))

    # wait for a connection
    server.listen(1)
    client, _ = server.accept()

    # get time before sending
    before = time.time()
    
    # send a kilobyte
    client.sendencode())

    # get time after sending
    after = time.time()

    # close server and client
    client.close()
    server.close()

    return 1 / (after - before)


def _upClient():
    # create and setup client
    client = sk.socket(sk.AF_INET, sk.SOCK_STREAM)

    # wait until server is active and connect
    while True:
        try:
            client.connect((ip, 6433))
            
        except: pass
        else: break

    # receive a kilobyte
    client.recv(1024)
    
    # close connection
    client.close()
    

def uploadTest():
    return _upServer()

def downloadTest():
    return _downServer()


if __name__ == '__main__':
    upload = uploadTest()
    download = downloadTest()

    upload = f'\033[92m {str(upload)[0:7]}' if upload is not None else '\033[91m null'
    download = f'\033[92m {str(download)[0:7]}' if download is not None else '\033[91m null'
    print(f'Local machine TCP speed:\n    upload   -> {upload} kBps\033[00m \n    download -> {download} kBps \033[00m')
